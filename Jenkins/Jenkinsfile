node {
   def commit_id
   stage('Checkout') {
     checkout scm
     sh "git rev-parse --short HEAD > .git/commit-id"
     commit_id = readFile('.git/commit-id').trim()
   }
   try{
    stage('Build') {
     def myTestContainer = docker.image('node:16')
     myTestContainer.pull()
     myTestContainer.inside {
       sh 'npm install'
     }
    }
    stage('Testing'){
      echo 'Running Tests'
      // println('A test has failed!')
      // sh 'exit 1'
    }
    stage('Final'){
        echo 'Pipeline complete'
    }
   }catch(e){
      //configure email reciepents
      def to = emailextrecipients([
              [$class: 'CulpritsRecipientProvider'],
              [$class: 'DevelopersRecipientProvider'],
              [$class: 'RequesterRecipientProvider']
      ])
      // mark build as failed
      currentBuild.result = "FAILURE";
      // set variables
      def subject = "${env.JOB_NAME} - Build #${env.BUILD_NUMBER} ${currentBuild.result}"
      def content = '${JELLY_SCRIPT,template="html"}'

      // send email
      if(to != null && !to.isEmpty()) {
        emailext(body: content, mimeType: 'text/html',
          replyTo: '$DEFAULT_REPLYTO', subject: subject,
          to: to, attachLog: true )
      }

      //thow error
      throw e
   }
   
                               
}                                          
